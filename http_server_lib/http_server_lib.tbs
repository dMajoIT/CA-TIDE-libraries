include "global.tbh"

dim http_servers as http_server_state(HTTP_SERVER_COUNT)

declare sub http_server_send_response(index as byte)

sub http_server_start()
	dim ii as byte
    for ii=0 to HTTP_SERVER_COUNT-1 'allocate sockets for the webserver
        sock.num=sock_get("W" + str(ii))
		http_servers(ii).socket=sock.num
        http_servers(ii).state=HTTP_SERVER_STATE_IDLE
        sock.connectiontout=120
        sock.txbuffrq(2)
        sock.rxbuffrq(1)
        ' sock.varbuffrq(1)
        sys.buffalloc()
        ' sock.redir(PL_REDIR_SOCK0 + sock.num)
        
        sock.protocol=PL_SOCK_PROTOCOL_TCP
        sock.localportlist="80"
        sock.allowedinterfaces="NET,WLN"
        sock.inconmode=PL_SOCK_INCONMODE_ANY_IP_ANY_PORT
    next ii
end sub

function http_server_get(socket_num as byte) as byte
    http_server_get=255
    dim ii as byte
    for ii=0 to HTTP_SERVER_COUNT-1 'allocate sockets for the webserver
        if http_servers(ii).socket=socket_num then
            http_server_get=ii
            exit function
        end if
    next ii
end function

sub http_server_proc_sock_event(newstate as pl_sock_state,newstatesimple as pl_sock_state_simple)
    dim index as byte=http_server_get(sock.num)
    if index<>255 then
        if newstatesimple=PL_SSTS_EST then
            http_servers(index).state=HTTP_SERVER_STATE_RQ_METHOD
            http_servers(index).request_path=""
            http_servers(index).request_file_name=""
            http_servers(index).request_method=""
            http_servers(index).request_header_end=""
            http_servers(index).request_length=0
            http_servers(index).file_pos=0
            http_servers(index).resp_buf=""
            http_servers(index).request_body=""
            http_servers(index).request_authenticated=http_server_password=""
        else if sock.statesimple=PL_SSTS_CLOSED then
            http_servers(index).state=HTTP_SERVER_STATE_IDLE
            sock.txclear()
            sock.rxclear()
        end if
    end if
end sub

sub http_server_response_status(code as word)
    dim header as string(30)="HTTP/1.1 "
    dim message as string(30)="OK"
    header=header + str(code) + " "
    if code=401 then
        message="Unauthorized"
    end if
    header=header+message+"\r\n"
    sock.setdata(header)
    sock.send()
end sub

sub http_server_response_header(byref header as string(50), byref value as string(50))
    sock.setdata(header + ": " + value + "\r\n")
    sock.send()
end sub

sub http_server_response_header_end()
    sock.setdata("\r\n")
    sock.send()
end sub

sub http_server_send_response_header(index as byte)
    dim server as http_server_state=http_servers(index)
    dim header as string="HTTP/1.1 200 OK\r\n"
    http_servers(index).request_file_name=http_servers(index).request_path
    if left(http_servers(index).request_path,1)="/" then
        http_servers(index).request_file_name=right(http_servers(index).request_file_name,len(http_servers(index).request_file_name)-1)
    end if
    if http_servers(index).request_file_name="" then
        http_servers(index).request_file_name="index.html"
    end if
    dim file_name as string=http_servers(index).request_file_name
    if instr(1,file_name,"?",1)>0 then
        file_name=left(file_name,instr(1,file_name,"?",1)-1)
    end if
    if instr(1,file_name,"#",1)>0 then
        file_name=left(file_name,instr(1,file_name,"#",1)-1)
    end if

    http_servers(index).request_file_name=file_name
    

    dim extension as string=http_servers(index).request_file_name
    dim content_encoding as string=""
    dim dot_index as byte=1
    while instr(dot_index,extension,".",1)>0
        extension=right(extension,len(extension)-instr(dot_index,extension,".",1))
        dot_index=dot_index+1
    wend

    if http_server_password<>"" AND http_servers(index).request_authenticated=false then
        if instr(1,http_servers(index).request_path,"?password="+http_server_password,1)=0 then
            http_server_response_status(401)
            http_server_response_header("WWW-Authenticate","Basic realm=\x22Device Console\x22,charset=\x22UTF-8\x22,alrithm=\x22MD5\x22")
            http_server_response_header_end()
            while sock.txlen<>0
                doevents
            wend
            sock.close()
            exit sub
        end if
    end if
    
    dim callback_result as boolean=callback_http_server_endpoint_called(http_servers(index))
    if callback_result<>true then
    dim content_type as string="text/html"
    select case extension
        case "json":
            content_type="application/json"
        case "js":
            romfile.open(http_servers(index).request_file_name+".gz")
            if romfile.size<>0 then
                http_servers(index).request_file_name=http_servers(index).request_file_name+".gz"
                content_encoding="Content-Encoding: gzip\r\n"
            end if
            content_type="application/javascript"
        case "css":
			romfile.open(http_servers(index).request_file_name+".gz")
            if romfile.size<>0 then
                http_servers(index).request_file_name=http_servers(index).request_file_name+".gz"
                content_encoding="Content-Encoding: gzip\r\n"
            end if
            content_type="text/css"
        case "html":
            content_type="text/html"
        case "png":
            content_type="image/png"
        case "jpg", "jpeg":
            content_type="image/jpeg"
        case else:
            content_type=""
    end select

    romfile.open(http_servers(index).request_file_name)
	http_servers(index).file_size=romfile.size
    if content_type="" OR romfile.size=0 then
        header="HTTP/1.1 404 Not Found\r\n\r\n"
    else
        http_servers(index).file_size=romfile.size
        http_servers(index).file_pos=0
		
		header=header+"Server: "+DEVICE_NAME+"\r\n"
		header=header+"Content-Type: "+content_type+"\r\n"
		header=header+"Content-Length: "+lstr(http_servers(index).file_size)+"\r\n"
		header=header+content_encoding
		header=header+"Connection: close\r\n"
		header=header+"\r\n"
    end if

    sock.notifysent(sock.txbuffsize-len(header))
    http_servers(index).resp_buf=header
    http_servers(index).state=HTTP_SERVER_STATE_RS_BODY
	else
		http_servers(index).file_size=0
        http_servers(index).file_pos=0
		http_servers(index).resp_buf=""
		http_servers(index).state=HTTP_SERVER_STATE_RS_BODY
        while sock.txlen<>0
            doevents
        wend
		http_server_send_response(index)
	end if
end sub

sub http_server_send_response(index as byte)
    dim server as http_server_state=http_servers(index)
    if http_servers(index).state<>HTTP_SERVER_STATE_RS_BODY then
        exit sub
    end if
    sock.num=server.socket

    romfile.open(http_servers(index).request_file_name)
    romfile.pointer32=http_servers(index).file_pos

    'blocking version
    ' while http_servers(index).file_pos<http_servers(index).file_size 
    '     dim data as string=romfile.getdata(255)
    '     http_servers(index).file_pos=romfile.pointer32
    '     while sock.txfree<255
    '         doevents
    '     wend
    '     sock.setdata(data)
    '     sock.send()
    ' wend
    ' http_servers(index).state=HTTP_SERVER_STATE_IDLE
    ' while sock.txlen<>0
    '     doevents
    ' wend
    ' sock.close()



    if http_servers(index).file_pos<=http_servers(index).file_size AND http_servers(index).file_size>0 then
        dim data as string=romfile.getdata(255)
        http_servers(index).file_pos=romfile.pointer32
        http_servers(index).resp_buf=data
        sock.notifysent(sock.txbuffsize-len(data))
    else
        http_servers(index).state=HTTP_SERVER_STATE_IDLE
		sys.debugprint("HTTP>FN: "+http_servers(index).request_path+"\r\n")
		sys.debugprint(str(sys.timercountms-http_servers(index).ts)+"\r\n")
		http_servers(index).ts=sys.timercountms
        sock.close()
    end if
end sub

sub http_server_proc_sock_data()
	dim index as byte=http_server_get(sock.num)
    if index<>255 then
        dim data as string=sock.getdata(255)
		dim data_len as byte=len(data)
        dim c as string(1)=""
		dim ci as byte=0
        dim ti as byte=0
		while ci<data_len
		c=mid(data,ci+1,1)
		ci=ci+1
        select case http_servers(index).state
            case HTTP_SERVER_STATE_RQ_METHOD
                ti=instr(ci,data," ",1)
                if ti>0 then
                    http_servers(index).request_method=http_servers(index).request_method+mid(data,ci,ti-ci)
                    ci=ti
                    http_servers(index).state=HTTP_SERVER_STATE_RQ_URI
                else
                    if c<>" " AND c<>"" then
                        http_servers(index).request_method=http_servers(index).request_method+c
                    else
                        http_servers(index).state=HTTP_SERVER_STATE_RQ_URI
                    end if
                end if
            case HTTP_SERVER_STATE_RQ_URI
                ti=instr(ci,data," ",1)
                if ti>0 then
                    http_servers(index).request_path=http_servers(index).request_path+mid(data,ci,ti-ci)
                    ci=ti
                    http_servers(index).state=HTTP_SERVER_STATE_RQ_PROTOCOL
                else
                    if c<>" " AND c<>"" then
                        http_servers(index).request_path=http_servers(index).request_path+c
                    else
                        http_servers(index).state=HTTP_SERVER_STATE_RQ_PROTOCOL
                    end if
                end if
                if http_servers(index).state=HTTP_SERVER_STATE_RQ_PROTOCOL then
                    http_servers(index).ts=sys.timercountms
                    sys.debugprint("HTTP>RQ: "+http_servers(index).request_method+" "+http_servers(index).request_path+"\r\n")
                end if
            case HTTP_SERVER_STATE_RQ_PROTOCOL
                ti=instr(ci,data,"\r",1)
                if ti>0 then
                    http_servers(index).state=HTTP_SERVER_STATE_RQ_HEADER
                    http_servers(index).request_header_end=""
                    http_servers(index).request_header_name=""
                    http_servers(index).request_header_value=""
                    ci=ti+1
                end if
            case HTTP_SERVER_STATE_RQ_HEADER
                ti=instr(ci,data,":",1)
                if ti<>0 AND http_servers(index).request_header_end="" then
                    http_servers(index).request_header_name=mid(data,ci,ti-ci)
                    ci=ti+1
                    http_servers(index).request_header_end=":"
                end if
                ti=instr(ci,data,"\r",1)
                if ti<>0 then
                    http_servers(index).request_header_value=http_servers(index).request_header_value+mid(data,ci,ti-ci)
                    http_servers(index).request_header_end=http_servers(index).request_header_end+"\r\n"
                    ci=ti+1
                else
                    if http_servers(index).request_header_end="" then
                        http_servers(index).request_header_name=mid(data,ci,len(data)-ci)
                    else
                        http_servers(index).request_header_value=mid(data,ci,len(data)-ci)
                    end if
                    ci=len(data)
                end if
                if http_servers(index).request_header_end=":\r\n" then
                    if instr(1,http_servers(index).request_header_value," ",1)=1 then
                        http_servers(index).request_header_value=right(http_servers(index).request_header_value,len(http_servers(index).request_header_value)-1)
                    end if
                    callback_http_server_header_received(http_servers(index),http_servers(index).request_header_name,http_servers(index).request_header_value)
                    ' sys.debugprint("Header: "+http_servers(index).request_header_name+" Value: "+http_servers(index).request_header_value)
                    if http_servers(index).request_header_name="Content-Length" then
                        http_servers(index).request_length=lval(http_servers(index).request_header_value)
                    else if http_servers(index).request_header_name="Authorization" AND http_server_password<>"" then
                        dim decoded as string(128)=""
                        dim encoded as string(128)=http_servers(index).request_header_value
                        while instr(1,encoded," ",1)>0
                            encoded=right(encoded,len(encoded)-instr(1,encoded," ",1))
                        wend
                        base64_decode(encoded,decoded)
                        if instr(1,decoded,":",1)>0 then
                            dim parts as string(2)
                            dim user as string(50)=left(decoded,instr(1,decoded,":",1)-1)
                            dim password as string(50)=right(decoded,len(decoded)-instr(1,decoded,":",1))
                            if password=http_server_password then
                                http_servers(index).request_authenticated=true
                            end if
                        end if
                    end if
                    http_servers(index).request_header_name=""
                    http_servers(index).request_header_value=""
                    http_servers(index).request_header_end=""
                else if http_servers(index).request_header_end="\r\n" 
                    AND http_servers(index).request_header_name="" 
                    AND http_servers(index).request_header_value="" then
                    'end of headers
                    sys.debugprint("HTTP>HD: "+http_servers(index).request_path+"\r\n")
					sys.debugprint(str(sys.timercountms-http_servers(index).ts)+"\r\n")
					http_servers(index).ts=sys.timercountms
                    if http_servers(index).request_length>0 then
                        http_servers(index).state=HTTP_SERVER_STATE_RQ_BODY
                    else
                        http_servers(index).state=HTTP_SERVER_STATE_RS_HEADER
                        http_server_send_response_header(index)
                    end if
                    http_servers(index).request_header_name=""
                    http_servers(index).request_header_value=""
                    http_servers(index).request_header_end=""
                end if
            case HTTP_SERVER_STATE_RQ_BODY
                http_servers(index).request_body=http_servers(index).request_body+mid(data,ci,255)
                ci=len(data)
                if len(http_servers(index).request_body)>=http_servers(index).request_length then
                    http_servers(index).state=HTTP_SERVER_STATE_RS_HEADER
                    http_server_send_response_header(index)
                end if
            
            case else:
                ' data=sock.getdata(255)
        end select
        wend
    end if
end sub

sub http_server_proc_sock_data_sent()
    dim index as byte=http_server_get(sock.num)
    if index<>255 then
        sock.setdata(http_servers(index).resp_buf)
        sock.send()
        http_server_send_response(index)
    end if
end sub
