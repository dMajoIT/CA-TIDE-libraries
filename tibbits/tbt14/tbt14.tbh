#ifndef TBT14_CLK_PIN
	#define TBT14_CLK_PIN PL_IO_NULL
#endif

#ifndef TBT14_DATA_PIN
	#define TBT14_DATA_PIN PL_IO_NULL
#endif

#ifndef TBT14_LOAD_PIN
	#define TBT14_LOAD_PIN PL_IO_NULL
#endif

#ifndef TBT14_BUSY_PIN
	#define TBT14_BUSY_PIN PL_IO_NULL
#endif

enum en_tbt14_dac_nums
	DAC_1
	DAC_2
	DAC_3
	DAC_4
end enum

declare function tbt14_init(signature as string, data_pin as byte, clk_pin as byte, load_pin as byte, busy_pin as byte, byref tbt_channel as byte, use_ssi as no_yes) as ok_ng
'Call this function to initialize the Tibbit.
'Use_ssi argument specifies whether you want to communicate with this Tibbit using the SSI channel running in the I2C mode (YES), or
'go for direct I/O manipulation a.k.a. bit-banging (NO).
'Note that there is a limited number of SSI channels so if you set use_ssi=YES this function may return NG, meaning that
'there are no free SSI channels left. This doesn't mean failure. Rather, it means that comms will proceed in bit banging mood.

declare sub tbt14_set_mv(n as en_tbt14_dac_nums, mv as integer, load_pin as byte, busy_pin as byte, tbt_channel as byte)
'Sets the outputs of one DAC channel to output voltage expressed in mV.

declare sub tbt14_set(n as en_tbt14_dac_nums,v as word, load_pin as byte, busy_pin as byte, tbt_channel as byte)
'Programs a 12-bit value into one DAC channel.
'The range is from 0 (-10V) to 4095 (+10V).
