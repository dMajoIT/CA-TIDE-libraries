'***********************************************************************************************************
'			Tibbit #35 (atmospheric pressure sensor)
'***********************************************************************************************************

include "global.tbh"

const TBT35_INIT_SIGNATURE=&h10FE
const TBT35_STAMP="TBT35>"
const TBT35_CR_LF=chr(13)+chr(10)

const TBT35_WRITE_ADDR=&hC0			' Manufacturer address code for write
const TBT35_READ_ADDR =&hC1			' Manufacturer address code for read

const TBT35_CMD_READ_PRESSURE		=&h00
const TBT35_CMD_READ_COEFFICIENT	=&h04
const TBT35_CMD_START_CONVERSION	=&h12

#if TBT35_DEBUG_PRINT=1
	declare sub tbt35_debug_print(data as string)
#endif
declare sub tbt35_delay_msecond(value as word)

dim tbt35_i2c_num as byte
dim tbt35_init_flag as word
dim tbt35_a0,tbt35_b1,tbt35_b2,tbt35_c12 as float=0
'==============================================================================
function tbt35_init(byref signature as string, use_ssi as no_yes, pin_clk as byte, pin_data as byte, byref channel as byte) as ok_ng
'Call this function to initialize the Tibbit.
'Use_ssi argument specifies whether you want to communicate with this Tibbit using the SSI channel running in the I2C mode (YES), or
'go for direct I/O manipulation a.k.a. bit-banging (NO).
'Note that there is a limited number of SSI channels so if you set use_ssi=YES this function may return NG, meaning that
'there are no free SSI channels left. This doesn't mean failure. Rather, it means that comms will proceed in bit banging mood.
	dim tmp as byte
	dim a0_tmp,b1_tmp,b2_tmp,c12_tmp,tmp2 as word

	#if TBT35_DEBUG_PRINT=1
		tbt35_debug_print("+++tbt_35_init()+++")
	#endif

	tbt35_init=OK

	tbt35_init_flag=TBT35_INIT_SIGNATURE
	channel=si2c_register(signature, pin_data, pin_clk, use_ssi)
	i2c.num=channel
	i2c.sdamap=pin_data
	i2c.sclmap=pin_clk
	i2c.enabled=YES

	#if TBT35_DEBUG_PRINT=1
		tbt35_debug_print("i2c num: "+str(channel))
	#endif


	i2c.start()
	i2c.write(TBT35_WRITE_ADDR)
	i2c.write(TBT35_CMD_READ_COEFFICIENT)
	i2c.start()
	i2c.write(TBT35_READ_ADDR)

	'tbt35_a0
	tmp=i2c.read(ACK)
	a0_tmp=tmp*256
	tmp=i2c.read(ACK)
	a0_tmp=a0_tmp+tmp

	'tbt35_b1
	tmp=i2c.read(ACK)
	b1_tmp=tmp*256
	tmp=i2c.read(ACK)
	b1_tmp=b1_tmp+tmp

	'tbt35_b2
	tmp=i2c.read(ACK)
	b2_tmp=tmp*256
	tmp=i2c.read(ACK)
	b2_tmp=b2_tmp+tmp

	'tbt35_c12
	tmp=i2c.read(ACK)
	c12_tmp=tmp*256
	tmp=i2c.read(NACK)
	c12_tmp=c12_tmp+tmp
	i2c.stop()

	'tbt35_a0 :signed, integer bits=12,fractional bits=3
	tbt35_a0=a0_tmp and &h7FF8
	tbt35_a0=tbt35_a0/8

	tmp2=a0_tmp and &h0007
	'Negative coefficients are coded in 2's complement notation
	if a0_tmp and &h8000 then
		tbt35_a0=4095-tbt35_a0
		tmp2=&h7-a0_tmp
	end if
	'f2
	if tmp2 and &h04 then
		tbt35_a0=tbt35_a0+0.5
	end if
	'f1
	if tmp2 and &h02 then
		tbt35_a0=tbt35_a0+0.25
	end if
	'f0
	if tmp2 and &h01 then
		tbt35_a0=tbt35_a0+0.125
	end if
	
	if a0_tmp and &h8000 then
		tbt35_a0=-tbt35_a0
	end if

	'tbt35_b1	:signed, integer bits=2,fractional bits=13
	tbt35_b1=b1_tmp and &h6000
	tbt35_b1=tbt35_b1/8192
	tmp2=b1_tmp and &h1FFF

	'Negative coefficients are coded in 2's complement notation
	if b1_tmp and &h8000 then
		tbt35_b1=3-tbt35_b1
		tmp2= &h1FFF-b1_tmp
	end if
	'f12
	if tmp2 and &h1000 then
		tbt35_b1=tbt35_b1+0.5
	end if
	'f11
	if tmp2 and &h800 then
		tbt35_b1=tbt35_b1+0.25
	end if
	'f10
	if tmp2 and &h400 then
		tbt35_b1=tbt35_b1+0.125
	end if
	'f9
	if tmp2 and &h200 then
		tbt35_b1=tbt35_b1+0.0625
	end if
	'f8
	if tmp2 and &h100 then
		tbt35_b1=tbt35_b1+0.03125
	end if
	'f7
	if tmp2 and &h80 then
		tbt35_b1=tbt35_b1+0.015625
	end if
	'f6
	if tmp2 and &h40 then
		tbt35_b1=tbt35_b1+0.0078125
	end if
	'f5
	if tmp2 and &h20 then
		tbt35_b1=tbt35_b1+0.00390625
	end if
	'f4
	if tmp2 and &h10 then
		tbt35_b1=tbt35_b1+0.001953125
	end if
	'f3
	if tmp2 and &h08 then
		tbt35_b1=tbt35_b1+0.0009765625
	end if
	'f2
	if tmp2 and &h04 then
		tbt35_b1=tbt35_b1+0.00048828125
	end if
	'f1
	if tmp2 and &h02 then
		tbt35_b1=tbt35_b1+0.000244140625
	end if
	'f0
	if tmp2 and &h01 then
		tbt35_b1=tbt35_b1+0.0001220703125
	end if

	if b1_tmp and &h8000 then
		tbt35_b1=-tbt35_b1
	end if

	'tbt35_b2	:signed, integer bits=1,fractional bits=14
	tbt35_b2=b2_tmp and &h4000
	tbt35_b2=tbt35_b2/16384
	tmp2=b2_tmp and &h3FFF

	'Negative coefficients are coded in 2's complement notation
	if b2_tmp and &h8000 then
		tbt35_b2=1-tbt35_b2
		tmp2=&h3FFF-b2_tmp
	end if

	'f13
	if tmp2 and &h2000 then
		tbt35_b2=tbt35_b2+0.5
	end if
	'f12
	if tmp2 and &h1000 then
		tbt35_b2=tbt35_b2+0.25
	end if
	'f11
	if tmp2 and &h800 then
		tbt35_b2=tbt35_b2+0.125
	end if
	'f10
	if tmp2 and &h400 then
		tbt35_b2=tbt35_b2+0.0625
	end if
	'f9
	if tmp2 and &h200 then
		tbt35_b2=tbt35_b2+0.03125
	end if
	'f8
	if tmp2 and &h100 then
		tbt35_b2=tbt35_b2+0.015625
	end if
	'f7
	if tmp2 and &h80 then
		tbt35_b2=tbt35_b2+0.0078125
	end if
	'f6
	if tmp2 and &h40 then
		tbt35_b2=tbt35_b2+0.00390625
	end if
	'f5
	if tmp2 and &h20 then
		tbt35_b2=tbt35_b2+0.001953125
	end if
	'f4
	if tmp2 and &h10 then
		tbt35_b2=tbt35_b2+0.0009765625
	end if
	'f3
	if tmp2 and &h08 then
		tbt35_b2=tbt35_b2+0.00048828125
	end if
	'f2
	if tmp2 and &h04 then
		tbt35_b2=tbt35_b2+0.000244140625
	end if
	'f1
	if tmp2 and &h02 then
		tbt35_b2=tbt35_b2+0.0001220703125
	end if
	'f0
	if tmp2 and &h01 then
		tbt35_b2=tbt35_b2+0.00006103515625
	end if

	if b2_tmp and &h8000 then
		tbt35_b2=-tbt35_b2
	end if

	'tbt35_c12;signed, integer bits=0,fractional bits=13,dec pt zero pad=9
	tmp2=c12_tmp /4
	tmp2=tmp2 and &h1FFF

	'Negative coefficients are coded in 2's complement notation
	if c12_tmp and &h8000 then
		tbt35_c12=-tbt35_c12
		tmp2=&h1FFF-b2_tmp
	end if

	tbt35_c12=0.0
	'f12
	if tmp2 and &h1000 then
		tbt35_c12=tbt35_c12+0.0009765625
	end if
	'f11
	if tmp2 and &h800 then
		tbt35_c12=tbt35_c12+0.00048828125
	end if
	'f10
	if tmp2 and &h400 then
		tbt35_c12=tbt35_c12+0.000244140625
	end if
	'f9
	if tmp2 and &h200 then
		tbt35_c12=tbt35_c12+0.0001220703125
	end if
	'f8
	if tmp2 and &h100 then
		tbt35_c12=tbt35_c12+0.00006103515625
	end if
	'f7
	if tmp2 and &h80 then
		tbt35_c12=tbt35_c12+0.000030517578125
	end if
	'f6
	if tmp2 and &h40 then
		tbt35_c12=tbt35_c12+0.0000152587890625
	end if
	'f5
	if tmp2 and &h20 then
		tbt35_c12=tbt35_c12+0.00000762939453125
	end if
	'f4
	if tmp2 and &h10 then
		tbt35_c12=tbt35_c12+0.000003814697265625
	end if
	'f3
	if tmp2 and &h08 then
		tbt35_c12=tbt35_c12+0.0000019073486328125
	end if
	'f2
	if tmp2 and &h04 then
		tbt35_c12=tbt35_c12+0.00000095367431640625
	end if
	'f1
	if tmp2 and &h02 then
		tbt35_c12=tbt35_c12+0.000000476837158203125
	end if
	'f0
	if tmp2 and &h01 then
		tbt35_c12=tbt35_c12+0.0000002384185791015625
	end if

	if c12_tmp and &h8000 then
		tbt35_c12=-tbt35_c12
	end if

	#if TBT35_DEBUG_PRINT=1
		tbt35_debug_print("tbt35_a0  :"+ftostr(tbt35_a0,FTOSTR_MODE_AUTO,36))
		tbt35_debug_print("tbt35_b1  :"+ftostr(tbt35_b1,FTOSTR_MODE_AUTO,36))
		tbt35_debug_print("tbt35_b2  :"+ftostr(tbt35_b2,FTOSTR_MODE_AUTO,36))
		tbt35_debug_print("tbt35_c12 :"+ftostr(tbt35_c12,FTOSTR_MODE_AUTO,36))
	#endif

	#if TBT35_DEBUG_PRINT=1
		tbt35_debug_print("---tbt_35_init()---")
	#endif
end function

function tbt35_get(channel as byte) as word
'Returns the word value expressing the pressure in 10 Pa steps.
	tbt35_get=tbt35_get_kpa(channel)*100
end function


function tbt35_get_kpa(channel as byte)as float
'Returns the floating point value expressing the pressure in kPa.
	dim tmp as byte
	dim padc,tadc as word=0
	dim c12x2,a1,a1x1,y1,a2x2,pcomp as float

	if tbt35_init_flag<>TBT35_INIT_SIGNATURE then
	#if TBT35_DEBUG_PRINT=1
		tbt35_debug_print("The lib is not initialized, call tbt35_init() first")
	#endif
		exit function
	end if

	i2c.num=channel


	i2c.start()
	i2c.write(TBT35_WRITE_ADDR)
	i2c.write(TBT35_CMD_START_CONVERSION)
	i2c.write(&h00)
	i2c.stop()

	'Time between start convert command and data available in the Pressure and Temperature registers
	#if PLATFORM_TYPE_32
		tbt35_delay_msecond(1)
	#else
		tbt35_delay_msecond(3)
	#endif

	i2c.start()

	i2c.write(TBT35_WRITE_ADDR)
	i2c.write(TBT35_CMD_READ_PRESSURE)

	i2c.start()
	i2c.write(TBT35_READ_ADDR)

	'pressure
	tmp=i2c.read(ACK)
	padc=tmp*256
	tmp=i2c.read(ACK)
	padc=padc+tmp

	'temprature
	tmp=i2c.read(ACK)
	tadc=tmp*256
	tmp=i2c.read(NACK)
	tadc=tadc+tmp

	i2c.stop()

	padc=padc /64
	tadc=tadc /64

	'Pcomp = tbt35_a0 + (tbt35_b1 + tbt35_c12 .Tadc) . Padc + tbt35_b2 . Tadc
	c12x2=tbt35_c12*tadc
	a1=tbt35_b1+c12x2
	a1x1=a1*padc
	y1=tbt35_a0+a1x1
	a2x2=tbt35_b2*tadc
	pcomp=y1+a2x2
	
	'kpa=pcomp*(115-50)/1023 +50
	tbt35_get_kpa=pcomp*(115-50)/1023+50

	#if TBT35_DEBUG_PRINT=1
		tbt35_debug_print("padc/tadc"+str(padc)+"/"+str(tadc))
	#endif	
end function

sub tbt35_delay_msecond(value as word)
	dim ax,bx as word
	#if PLATFORM_TYPE_32
		dim target as dword=sys.timercountms + value
		while sys.timercountms<target
		wend
	#else
		for ax=0 to value
			for bx=0 to 28
			next bx
		next ax
	#endif
end sub

#if TBT35_DEBUG_PRINT=1
sub tbt35_debug_print(data as string)
	sys.debugprint(TBT35_STAMP+data+TBT35_CR_LF)
end sub
#endif
