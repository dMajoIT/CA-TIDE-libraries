'***********************************************************************************************************
'			Tibbit #53  4 mA to 20mA current loop receiver with 16 bit ADC converter
'***********************************************************************************************************

include "global.tbh"

const TBT53_INIT_SIGNATURE = &h1053
const TBT53_STAMP = "TBT53>"
const TBT53_CR_LF = chr(13)+chr(10)

const TBT53_WRITE_ADDR = &h90
const TBT53_READ_ADDR = &h91

#if TBT53_DEBUG_PRINT = 1
	declare sub tbt53_debug_print(data as string)
#endif

dim tbt53_i2c_num as byte
dim tbt53_init_flag as word

function tbt53_init(use_ssi as no_yes, pin_clk as byte, pin_data as byte, byref channel as byte) as ok_ng
'Call this function to initialize the Tibbit.
'Use_ssi argument specifies whether you want to communicate with this Tibbit using the SSI channel running in the I2C mode (YES), or
'go for direct I/O manipulation a.k.a. bit-banging (NO).
'Note that there is a limited number of SSI channels so if you set use_ssi=YES this function may return NG, meaning that
'there are no free SSI channels left. This doesn't mean failure. Rather, it means that comms will proceed in bit banging mood.
	dim config, hi_byte,lo_byte as byte
	'dim s as string
	#if TBT53_DEBUG_PRINT = 1
		tbt53_debug_print("+++tbt_53_init()+++")
	#endif

	tbt53_init = OK

	tbt53_init_flag = TBT53_INIT_SIGNATURE
	channel = si2c_register("TBT53", pin_data, pin_clk,use_ssi)
	i2c.num = channel
	i2c.sdamap=pin_data
	i2c.sclmap=pin_clk
	i2c.enabled=YES

	i2c.num=channel
	i2c.start()
	i2c.write(TBT53_WRITE_ADDR)
	i2c.write(&h0C)
	i2c.stop()

	i2c.start()
	i2c.write(TBT53_READ_ADDR)
	hi_byte = i2c.read(ACK)
	lo_byte = i2c.read(ACK)
	config = i2c.read(NACK)
	i2c.stop()

	#if TBT53_DEBUG_PRINT = 1
		tbt53_debug_print("config : " + hex(config))
		tbt53_debug_print("---tbt_53_init()---")
	#endif
end function

function tbt53_get_current(byref ma as real, channel as byte) as ok_ng
'Performs ADC conversion and returns PREVIOUS conversion result expressed in A.

	dim hi_byte,lo_byte,config as byte
	dim tmp as word
	dim f as no_yes=NO
	dim rtn as real

	const LSB_V = 0.000152587890625	'  5 V / 323768
	const mA_On_V = 0.0032			' (20 mA - 4 mA) / 5000 mV

	tbt53_get_current = NG
	if tbt53_init_flag <> TBT53_INIT_SIGNATURE then exit function

	i2c.num=channel
	i2c.start()
	i2c.write(TBT53_READ_ADDR)
	hi_byte = i2c.read(ACK)
	lo_byte = i2c.read(ACK)
	i2c.stop()

	tmp = hi_byte * 256
	tmp = tmp + lo_byte

	if tmp <= &h7FFF then
		rtn = tmp * LSB_V
	else
		rtn = &hFFFF - tmp + 1
		rtn = -(rtn * LSB_V)
	end if

	#if TBT53_DEBUG_PRINT = 1
		tbt53_debug_print(hex(hi_byte) + "/" + hex(lo_byte) + "/" + hex(config))
		tbt53_debug_print(ftostr(rtn,FTOSTR_MODE_AUTO,5) + " v")
	#endif
	if rtn < -0.6 then exit function

	ma = rtn * mA_On_V

	ma = ma + 0.004

	tbt53_get_current = OK
end function

#if TBT53_DEBUG_PRINT=1
sub tbt53_debug_print(data as string)
	sys.debugprint(TBT53_STAMP + data + TBT53_CR_LF)
end sub
#endif
