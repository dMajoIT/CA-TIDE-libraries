#ifndef _TBT52_TBH_
#define _TBT52_TBH_


enum tbt52_nums
	ADC_1,
	ADC_2,
	ADC_3,
	ADC_4
end enum

declare function tbt52_init(use_ssi as no_yes,pin_clk as byte,pin_data as byte,pin_mclr as byte,pin_int as byte,byref channel as byte) as ok_ng
'Call this function to initialize the Tibbit.
'Use_ssi argument specifies whether you want to communicate with this Tibbit using the SSI channel running in the I2C mode (YES), or
'go for direct I/O manipulation a.k.a. bit-banging (NO).
'Note that there is a limited number of SSI channels so if you set use_ssi=YES this function may return NG, meaning that
'there are no free SSI channels left. This doesn't mean failure. Rather, it means that comms will proceed in bit banging mood.

declare sub tbt52_channel_select(channel as tbt52_nums)
'Selects an active ADC channel. Use tbt52_get_volts() for actual conversion.


declare function tbt52_get_volts(pin_int as byte,channel as byte)as real
'Performs ADC conversion for the selected channel and returns PREVIOUS conversion result expressed in mV.
'Select desired channel using tbt52_channel_select() and it will conversion on the previous channel.

declare sub tbt52_release(channel as byte)

declare sub tbt52_compensation_calibrate(pin_int as byte,channel as byte)
#endif