include "global.tbh"

declare sub modbus_tcp_send(socket as byte, transactionId as word, protocolId as word, modbusUnitId as byte, modbusFunction as modbusFunc, byref data as string)
declare sub modbus_queue_add(request_item as modbus_request_item)
declare sub modbus_send(interface_number as byte, protocol as modbusProtocol, transactionId as word, protocolId as word, modbusUnitId as byte, modbusFunction as modbusFunc, byref data as string)
declare sub modbus_master_send_next()
declare sub modbus_debug_print(byref message as string)
declare sub modbus_print_packet(byref s as string, is_send as boolean)
declare function modbus_get_input_register(register as word) as word
declare function modbus_get_holding_register(register as word) as word
declare function modbus_queue_pop() as modbus_request_item
declare function modbus_master_get_request(byref request_item as modbus_request_item) as string
declare function modbus_crc16(data as byte(255), byte_cnt as byte) as word
declare function modbus_time_elapsed(end_time as dword) as boolean



dim modbus_queue_start as char
dim modbus_queue_end as char
dim modbus_slave_recv_buffer as string
dim modbus_request_queue as modbus_request_item(MODBUS_MAX_REQUESTS)
dim modbus_master_recv_buffer as string
dim modbus_trans_id as word
dim modbus_queue_count as byte
dim modbus_slave_id  as byte = 1

dim modbus_crc_table_hi as byte(256) = {
	&H00,&HC1,&H81,&H40,&H01,&HC0,&H80,&H41,&H01,&HC0,&H80,&H41,&H00,&HC1,&H81,&H40,
	&H01,&HC0,&H80,&H41,&H00,&HC1,&H81,&H40,&H00,&HC1,&H81,&H40,&H01,&HC0,&H80,&H41,
	&H01,&HC0,&H80,&H41,&H00,&HC1,&H81,&H40,&H00,&HC1,&H81,&H40,&H01,&HC0,&H80,&H41,
	&H00,&HC1,&H81,&H40,&H01,&HC0,&H80,&H41,&H01,&HC0,&H80,&H41,&H00,&HC1,&H81,&H40,
	&H01,&HC0,&H80,&H41,&H00,&HC1,&H81,&H40,&H00,&HC1,&H81,&H40,&H01,&HC0,&H80,&H41,
	&H00,&HC1,&H81,&H40,&H01,&HC0,&H80,&H41,&H01,&HC0,&H80,&H41,&H00,&HC1,&H81,&H40,
	&H00,&HC1,&H81,&H40,&H01,&HC0,&H80,&H41,&H01,&HC0,&H80,&H41,&H00,&HC1,&H81,&H40,
	&H01,&HC0,&H80,&H41,&H00,&HC1,&H81,&H40,&H00,&HC1,&H81,&H40,&H01,&HC0,&H80,&H41,
	&H01,&HC0,&H80,&H41,&H00,&HC1,&H81,&H40,&H00,&HC1,&H81,&H40,&H01,&HC0,&H80,&H41,
	&H00,&HC1,&H81,&H40,&H01,&HC0,&H80,&H41,&H01,&HC0,&H80,&H41,&H00,&HC1,&H81,&H40,
	&H00,&HC1,&H81,&H40,&H01,&HC0,&H80,&H41,&H01,&HC0,&H80,&H41,&H00,&HC1,&H81,&H40,
	&H01,&HC0,&H80,&H41,&H00,&HC1,&H81,&H40,&H00,&HC1,&H81,&H40,&H01,&HC0,&H80,&H41,
	&H00,&HC1,&H81,&H40,&H01,&HC0,&H80,&H41,&H01,&HC0,&H80,&H41,&H00,&HC1,&H81,&H40,
	&H01,&HC0,&H80,&H41,&H00,&HC1,&H81,&H40,&H00,&HC1,&H81,&H40,&H01,&HC0,&H80,&H41,
	&H01,&HC0,&H80,&H41,&H00,&HC1,&H81,&H40,&H00,&HC1,&H81,&H40,&H01,&HC0,&H80,&H41,
	&H00,&HC1,&H81,&H40,&H01,&HC0,&H80,&H41,&H01,&HC0,&H80,&H41,&H00,&HC1,&H81,&H40
}

dim modbus_crc_table_hi as byte(256) = {
	&H00,&HC0,&HC1,&H01,&HC3,&H03,&H02,&HC2,&HC6,&H06,&H07,&HC7,&H05,&HC5,&HC4,&H04,
	&HCC,&H0C,&H0D,&HCD,&H0F,&HCF,&HCE,&H0E,&H0A,&HCA,&HCB,&H0B,&HC9,&H09,&H08,&HC8,
	&HD8,&H18,&H19,&HD9,&H1B,&HDB,&HDA,&H1A,&H1E,&HDE,&HDF,&H1F,&HDD,&H1D,&H1C,&HDC,
	&H14,&HD4,&HD5,&H15,&HD7,&H17,&H16,&HD6,&HD2,&H12,&H13,&HD3,&H11,&HD1,&HD0,&H10,
	&HF0,&H30,&H31,&HF1,&H33,&HF3,&HF2,&H32,&H36,&HF6,&HF7,&H37,&HF5,&H35,&H34,&HF4,
	&H3C,&HFC,&HFD,&H3D,&HFF,&H3F,&H3E,&HFE,&HFA,&H3A,&H3B,&HFB,&H39,&HF9,&HF8,&H38,
	&H28,&HE8,&HE9,&H29,&HEB,&H2B,&H2A,&HEA,&HEE,&H2E,&H2F,&HEF,&H2D,&HED,&HEC,&H2C,
	&HE4,&H24,&H25,&HE5,&H27,&HE7,&HE6,&H26,&H22,&HE2,&HE3,&H23,&HE1,&H21,&H20,&HE0,
	&HA0,&H60,&H61,&HA1,&H63,&HA3,&HA2,&H62,&H66,&HA6,&HA7,&H67,&HA5,&H65,&H64,&HA4,
	&H6C,&HAC,&HAD,&H6D,&HAF,&H6F,&H6E,&HAE,&HAA,&H6A,&H6B,&HAB,&H69,&HA9,&HA8,&H68,
	&H78,&HB8,&HB9,&H79,&HBB,&H7B,&H7A,&HBA,&HBE,&H7E,&H7F,&HBF,&H7D,&HBD,&HBC,&H7C,
	&HB4,&H74,&H75,&HB5,&H77,&HB7,&HB6,&H76,&H72,&HB2,&HB3,&H73,&HB1,&H71,&H70,&HB0,
	&H50,&H90,&H91,&H51,&H93,&H53,&H52,&H92,&H96,&H56,&H57,&H97,&H55,&H95,&H94,&H54,
	&H9C,&H5C,&H5D,&H9D,&H5F,&H9F,&H9E,&H5E,&H5A,&H9A,&H9B,&H5B,&H99,&H59,&H58,&H98,
	&H88,&H48,&H49,&H89,&H4B,&H8B,&H8A,&H4A,&H4E,&H8E,&H8F,&H4F,&H8D,&H4D,&H4C,&H8C,
	&H44,&H84,&H85,&H45,&H87,&H47,&H46,&H86,&H82,&H42,&H43,&H83,&H41,&H81,&H80,&H40,
}

'	Define MODBUS UnitID for TCP

function modbus_initialize() as boolean
	
	modbus_queue_clear()
	modbus_slave_recv_buffer=""
	modbus_initialize = true
	
end function

sub modbus_slave_receive(byref recv_data as string, interface_number as byte, protocol as modbusProtocol)
	
	dim transactionId as word
	dim protocolId as word
	dim length as word
	dim modbusFunction as modbusFunc
	dim modbusStartReference as word
	dim modbusCount as word
	dim modbusLenMultipleData as word
	dim modbusValue as word
	dim modbusUnitId as byte
	dim i, j, k as word
	dim str_modbus as string
	dim FloatAsDWord as dword
	dim modbusBits as byte
	dim crc,tmpcrc as word=0
	dim prefix_len as byte=0
	dim crc_size as byte = 0
	dim data as string = modbus_slave_recv_buffer + recv_data
	modbus_slave_recv_buffer = data
	if len(modbus_slave_recv_buffer)=255 then
		modbus_slave_recv_buffer=""
		exit sub
	end if
	
	while len(modbus_slave_recv_buffer) <> 0
	data = modbus_slave_recv_buffer
	
	if protocol=modbus_TCP then
		prefix_len = 6
		if len(data) < 8 then exit sub
		transactionId = asc(mid(data, 1, 1)) * 256 + asc(mid(data, 2, 1))
		protocolId = asc(mid(data, 3, 1)) * 256 + asc(mid(data, 4, 1))
		if protocolId <> 0 then exit sub
	else
		if len(data) <= 5 then exit sub
		crc_size = 2
	end if
	
	modbusUnitId = asc(mid(data, prefix_len + 1, 1))
	modbusFunction = asc(mid(data, prefix_len + 2, 1))
	
	select case modbusFunction
		case WriteMultipleCoils,PresetMultipleRegisters:
			length=asc(mid(data, prefix_len + 7, 2)) + 7 + crc_size
		case else:
			length= 6 + crc_size
	end select
	
	if len(data) < prefix_len + length then
			exit sub
	end if
	
	str_modbus=mid(data, prefix_len + 3,length)
	
	if protocol=modbus_RTU then
		crc=asc(mid(data, length - 1, 1)) * 256 + asc(mid(data, length, 1))
		dim tmpstr as string=mid(data,1,length-2)
		tmpcrc=modbus_crc16(tmpstr, len(tmpstr))
		if crc<>tmpcrc then
			exit sub
		end if
		dim remaining as byte = len(data) - (len(tmpstr)+2)
		modbus_slave_recv_buffer = mid(data,len(tmpstr) + 3,remaining)
	else
		dim ss as byte=6+length+1
		modbus_slave_recv_buffer = mid(modbus_slave_recv_buffer,ss,255)
	end if
	
	data=str_modbus

	if modbusUnitId = modbus_slave_id or protocol = modbus_TCP then

		select case modbusFunction
		case ReadCoilStatus:				' Read DO
			modbusStartReference = asc(mid(data, 1, 1)) * 256 + asc(mid(data, 2, 1))
			modbusCount = asc(mid(data, 3, 1)) * 256 + asc(mid(data, 4, 1))
			' Check length 
			modbusLenMultipleData = modbusCount / 8
			if modbusCount mod 8 <> 0 then
				modbusLenMultipleData = modbusLenMultipleData + 1
			end if

			str_modbus = chr(modbusLenMultipleData)
			j = 1
			k = 0
			modbusBits = 0
			for i = 1 to modbusCount
				if modbus_callback_ReadCoilStatus(modbusStartReference) = true then
					modbusBits = modbusBits or j
				end if
				modbusStartReference = modbusStartReference + 1
				if j = 128 then
					j = 1
					k = k + 1
					str_modbus = str_modbus + chr(modbusBits)
					modbusBits = 0
				else
					j = j shl 1
				end if
			next i
			if j <> 1 then
				str_modbus = str_modbus + chr(modbusBits)
			end if
			modbus_send(interface_number, protocol, transactionId, protocolId, modbusUnitId, modbusFunction, str_modbus)
			
		case ReadInputStatus:				' Read DI
			modbusStartReference = asc(mid(data, 1, 1)) * 256 + asc(mid(data, 2, 1))
			modbusCount = asc(mid(data, 3, 1)) * 256 + asc(mid(data, 4, 1))
			' Check length 
			modbusLenMultipleData = modbusCount / 8
			if modbusCount mod 8 <> 0 then
				modbusLenMultipleData = modbusLenMultipleData + 1
			end if

			str_modbus = chr(modbusLenMultipleData)
			j = 1
			k = 0
			modbusBits = 0
			for i = 1 to modbusCount
				if modbus_callback_ReadInputStatus(modbusStartReference) = true then
					modbusBits = modbusBits or j
				end if
				modbusStartReference = modbusStartReference + 1
				if j = 128 then
					j = 1
					k = k + 1
					str_modbus = str_modbus + chr(modbusBits)
					modbusBits = 0
				else
					j = j shl 1
				end if
			next i
			if j <> 1 then
				str_modbus = str_modbus + chr(modbusBits)
			end if
			modbus_send(interface_number, protocol, transactionId, protocolId, modbusUnitId, modbusFunction, str_modbus)
			
		case ReadHoldingRegisters:			' Read AO
			modbusStartReference = asc(mid(data, 1, 1)) * 256 + asc(mid(data, 2, 1))
			modbusCount = asc(mid(data, 3, 1)) * 256 + asc(mid(data, 4, 1))
			str_modbus = chr((modbusCount*2 and &Hff))
			for i = modbusStartReference to modbusStartReference + modbusCount - 1
				modbusValue = modbus_callback_ReadHoldingRegister(i)
				str_modbus = str_modbus + chr((modbusValue shr 8) and &Hff) + chr(modbusValue and &Hff)
			next i
			modbus_send(interface_number, protocol, transactionId, protocolId, modbusUnitId, modbusFunction, str_modbus)
			
		case ReadInputRegisters:			' Read AI
			modbusStartReference = asc(mid(data, 1, 1)) * 256 + asc(mid(data, 2, 1))
			modbusCount = asc(mid(data, 3, 1)) * 256 + asc(mid(data, 4, 1))
			str_modbus = chr((modbusCount*2 and &Hff))
			for i = modbusStartReference to modbusStartReference + modbusCount - 1
				modbusValue = modbus_callback_ReadInputRegister(i)
				str_modbus = str_modbus + chr((modbusValue shr 8) and &Hff) + chr(modbusValue and &Hff)
			next i
			modbus_send(interface_number, protocol, transactionId, protocolId, modbusUnitId, modbusFunction, str_modbus)
			
		case WriteSingleCoil:				' Write DO
			modbusStartReference = asc(mid(data, 1, 1)) * 256 + asc(mid(data, 2, 1))
			modbusValue = asc(mid(data, 3, 1)) * 256 + asc(mid(data, 4, 1))
			if modbusValue = &hFF00 then modbusValue = 1
			modbusBits=modbus_callback_WriteSingleCoil(modbusStartReference, modbusValue)
			if modbusBits = 0 or modbusBits = 1 then
				modbus_send(interface_number, protocol, transactionId, protocolId, modbusUnitId, modbusFunction, mid(data, 1, 4))
			else 
				modbus_send(interface_number, protocol, transactionId, protocolId, modbusUnitId, &h86, str(modbusBits))
			end if
		
		case PresetSingleRegister:			' Write AO
			modbusStartReference = asc(mid(data, 1, 1)) * 256 + asc(mid(data, 2, 1))
			modbusValue = asc(mid(data, 3, 1)) * 256 + asc(mid(data, 4, 1))
			if modbus_callback_set_holding_register(modbusStartReference, modbusValue) = true then
				modbus_send(interface_number, protocol, transactionId, protocolId, modbusUnitId, modbusFunction, mid(data, 1, 4))
			end if
			
		case WriteMultipleCoils:			' Write DO multiple
			modbusStartReference = asc(mid(data, 1, 1)) * 256 + asc(mid(data, 2, 1))
			modbusCount = asc(mid(data, 3, 1)) * 256 + asc(mid(data, 4, 1))
			' Check length 
			modbusLenMultipleData = modbusCount / 8
			if modbusCount mod 8 <> 0 then
				modbusLenMultipleData = modbusLenMultipleData + 1
			end if
			
			j = 1
			k = 0
			for i = 1 to modbusCount
				if j = 1 then
					modbusValue = asc(mid(data, 6 + k, 1))
				end if
				if (modbusValue and &h1) = 1 then
					modbus_callback_WriteSingleCoil(modbusStartReference, 1)
				else 
					modbus_callback_WriteSingleCoil(modbusStartReference, 0)
				end if
				modbusValue = modbusValue shr 1
				modbusStartReference = modbusStartReference + 1
				if j = 8 then
					j = 1
					k = k + 1
				else
					j = j + 1
				end if
			next i
			modbus_send(interface_number, protocol, transactionId, protocolId, modbusUnitId, modbusFunction, mid(data, 1, 4))
			
		case PresetMultipleRegisters:		' Write AO multiple
			modbusStartReference = asc(mid(data, 1, 1)) * 256 + asc(mid(data, 2, 1))
			modbusCount = asc(mid(data, 3, 1)) * 256 + asc(mid(data, 4, 1))
			' Check length 
			if modbusCount * 2 = len(data) - 5 then
				for i = 1 to modbusCount
					modbusValue = asc(mid(data, 6 + (i - 1) * 2, 1)) * 256 + asc(mid(data, 6 + (i - 1) * 2 + 1, 1))
					modbus_callback_set_holding_register(modbusStartReference, modbusValue)
					modbusStartReference = modbusStartReference + 1
				next i
				modbus_send(interface_number, protocol, transactionId, protocolId, modbusUnitId, modbusFunction, mid(data, 1, 4))
			end if
			
		end select
	end if
	wend

end sub

sub modbus_tcp_send(socket as byte, transactionId as word, protocolId as word, modbusUnitId as byte, modbusFunction as modbusFunc, byref data as string)
	
	dim packet as string(8)
	
	packet = chr(transactionId shr 8) + chr(transactionId and &hFF)
	packet = packet + chr(protocolId shr 8) + chr(protocolId and &hFF)
	packet = packet + chr(0) + chr(len(data) + 2)
	packet = packet + chr(modbusUnitId)
	packet = packet + chr(modbusFunction)
	
	sock.num = socket
	sock.setdata(packet)
	sock.setdata(data)
	sock.send()
	
end sub

sub modbus_send(interface_number as byte, protocol as modbusProtocol, transactionId as word, protocolId as word, modbusUnitId as byte, modbusFunction as modbusFunc, byref data as string)
	if protocol=modbus_TCP then
		modbus_tcp_send(interface_number, transactionId, protocolId, modbusUnitId, modbusFunction, data)
	else if protocol=modbus_RTU then
		dim senddata as string=""
		senddata = chr(modbusUnitId)
		senddata = senddata + chr(modbusFunction)
		if len(data) = 0 then
			senddata = senddata + chr(len(data) shr 8)
			senddata = senddata + chr(len(data) and &HFF)
		else
			senddata = senddata + data
		end if
		dim crc as word = modbus_crc16(senddata, len(senddata))
		senddata = senddata + chr(crc shr 8)
		senddata = senddata + chr(crc and &HFF)

		ser.num=interface_number
		ser.notifysent(1)
		ser.setdata(senddata)
		ser.send()
	end if
end sub

sub modbus_master_send_next()
	if modbus_queue_start = -1 then
		exit sub
	end if
	dim prev_num as byte=0
	dim data as string=modbus_master_get_request(modbus_request_queue(modbus_queue_start))
	modbus_request_queue(modbus_queue_start).data = data

	#if MODBUS_DEBUG_PRINT
		modbus_print_packet(data, true)
	#endif
	if modbus_request_queue(modbus_queue_start).protocol=modbus_TCP then
		prev_num=sock.num
		sock.num=modbus_request_queue(modbus_queue_start).interface_number
		if sock.statesimple <> PL_SSTS_EST then
			exit sub
		end if
		sock.setdata(data)
		sock.send()
		sock.num=prev_num
	else if modbus_request_queue(modbus_queue_start).protocol=modbus_RTU then
		prev_num=ser.num
		ser.num=modbus_request_queue(modbus_queue_start).interface_number
'		ser.notifysent(1)
		ser.setdata(data)
		ser.send()
		ser.num=prev_num
	end if
	modbus_request_queue(modbus_queue_start).timestamp=sys.timercountms
'	modbus_debug_print("sent for " + str(modbus_request_queue(modbus_queue_start).device_id))
	
	modbus_master_recv_buffer=""
end sub

sub modbus_proc_timer()
	dim request_item as modbus_request_item
	if modbus_queue_start <> -1 then
		if modbus_request_queue(modbus_queue_start).timestamp = 0 then
			modbus_master_send_next()
		else
			if modbus_time_elapsed(modbus_request_queue(modbus_queue_start).timestamp + MODBUS_TIMEOUT) then
				modbus_debug_print("modbus timeout for device " + str(modbus_request_queue(modbus_queue_start).device_id))
				request_item = modbus_queue_pop()
				callback_modbus_slave_reply_timeout(request_item)
				modbus_master_send_next()
			end if
		end if
	end if
end sub

function modbus_time_elapsed(end_time as dword) as boolean
	modbus_time_elapsed = false
	dim current_time as dword = sys.timercountms
	if current_time > end_time AND current_time - end_time < 4000000000 then
		modbus_time_elapsed = true
	end if
end function

sub modbus_master_request(devaddr as byte, request as byte, start as word, count as word, regdata as string, interface_number as byte, protocol as modbusProtocol)
	dim request_item as modbus_request_item
	request_item.data = regdata
	request_item.device_id = devaddr
	request_item.timestamp = 0
	request_item.request_function = request
	request_item.start_register = start
	request_item.count = count
	request_item.interface_number = interface_number
	request_item.protocol = protocol
	
	modbus_queue_add(request_item)
end sub

function modbus_master_get_request(byref request_item as modbus_request_item) as string
	dim data as string
	data=""
	
	data = data + chr(request_item.device_id)
	data = data + chr(request_item.request_function)
	data = data + chr(request_item.start_register shr 8)
	data = data + chr(request_item.start_register and &HFF)
	select case request_item.request_function
		case ReadCoilStatus,ReadInputStatus,ReadHoldingRegisters,ReadInputRegisters:
			data = data + chr(request_item.count shr 8)
			data = data + chr(request_item.count and &HFF)
		case WriteSingleCoil, PresetSingleRegister:
			data = data + request_item.data
		case WriteMultipleCoils, PresetMultipleRegisters:
			data = data + chr(request_item.count shr 8)
			data = data + chr(request_item.count and &HFF)
			data = data + chr(request_item.count * 2)
			data = data + request_item.data
	end select
	
	if request_item.protocol=modbus_RTU then
		dim crc as word = modbus_crc16(data, len(data))
		data = data + chr(crc shr 8)
		data = data + chr(crc and &HFF)
	else if request_item.protocol=modbus_TCP then
		dim length as word=len(data)
		'length
		data = chr(length and &HFF) + data
		data = chr(length shr 8) + data
		'protocol id
		data = chr(0) + chr(0) + data
		'transaction id
		data = chr(modbus_trans_id and &HFF) + data
		data = chr(modbus_trans_id shr 8) + data
		modbus_trans_id = modbus_trans_id + 1
	end if
	modbus_master_get_request=data
end function

sub modbus_master_receive(recv_data as string, protocol as modbusProtocol)
	
	dim transactionId as word
	dim protocolId as word
	dim length as word
	dim modbusFunction as modbusFunc
	dim modbusStartReference as word
	dim modbusCount as word
	dim modbusLenMultipleData as word
	dim modbusValue as word
	dim modbusUnitId as byte
	dim i, j, k as word
	dim str_modbus as string
	dim FloatAsDWord as dword
	dim modbusBits as byte
	dim crc,tmpcrc as word=0
	dim request_item as modbus_request_item
	dim data as string = modbus_master_recv_buffer + recv_data
	dim prefix_len as byte=0
	modbus_master_recv_buffer = data
	
	if protocol=modbus_TCP then
		prefix_len = 6
		if len(data) < 8 then exit sub
		transactionId = asc(mid(data, 1, 1)) * 256 + asc(mid(data, 2, 1))
		protocolId = asc(mid(data, 3, 1)) * 256 + asc(mid(data, 4, 1))
		if protocolId <> 0 then exit sub
	else
		if len(data) <= 5 then exit sub
	end if
	
	modbusUnitId = asc(mid(data, prefix_len + 1, 1))
	modbusFunction = asc(mid(data, prefix_len + 2, 1))

	#if MODBUS_DEBUG_PRINT
		modbus_print_packet(data, false)
	#endif
	
	select case modbusFunction
		case ReadCoilStatus,ReadInputStatus:
			length = asc(mid(data, prefix_len + 3, 1))
			str_modbus = mid(data, prefix_len + 3, 3)
		case WriteSingleCoil, PresetSingleRegister:
			length = 3
			str_modbus = mid(data, prefix_len + 4, 5)
		case else:
			length = asc(mid(data, prefix_len + 3, 1))
			str_modbus=mid(data,prefix_len + 3,length+1)
	end select
	
	if protocol=modbus_RTU then
		if len(data) < 5 + length then
			exit sub
		end if
		crc=asc(mid(data, 3 + len(str_modbus), 1)) * 256 + asc(mid(data, 4 + len(str_modbus), 1))
		dim tmpstr as string=mid(data,1,2+len(str_modbus))
		tmpcrc=modbus_crc16(tmpstr, len(tmpstr))
		dim remaining as byte = len(data) - (len(tmpstr)+2)
		modbus_master_recv_buffer = mid(data,len(tmpstr) + 3,remaining)
		if crc<>tmpcrc then 
			modbus_debug_print("wrong crc")
			exit sub
		end if
	end if
	
	request_item = modbus_queue_pop()
	if request_item.device_id <> modbusUnitId then
		modbus_debug_print("incorrect device")
		exit sub
	end if
'	modbus_debug_print("reply for " + str(request_item.device_id))
	if modbusFunction = ReadCoilStatus or modbusFunction = ReadInputStatus then
		str_modbus = mid(data,4 + prefix_len,length)
	else 
		str_modbus = right(str_modbus,len(str_modbus) - 1)
	end if
	callback_modbus_slave_reply(request_item, str_modbus)
	modbus_master_send_next()
end sub

sub modbus_queue_clear()
	modbus_queue_start = -1
	modbus_queue_end = -1
	modbus_queue_count = 0
end sub

sub modbus_queue_add(request_item as modbus_request_item)
	if modbus_queue_start=-1 then
		modbus_queue_start = 0
		modbus_queue_end = 0
		modbus_queue_count = 0
	end if
	if modbus_queue_end = MODBUS_MAX_REQUESTS then
		modbus_queue_end=0
	end if
	modbus_request_queue(modbus_queue_end) = request_item
	modbus_queue_end=modbus_queue_end+1
	modbus_queue_count = modbus_queue_count + 1
end sub

function modbus_queue_pop() as modbus_request_item
	if modbus_queue_start <> -1 and modbus_queue_end <> -1 then
		modbus_request_queue(modbus_queue_start).timestamp = 0
		modbus_queue_pop = modbus_request_queue(modbus_queue_start)
		modbus_queue_start = modbus_queue_start + 1
		if modbus_queue_start = MODBUS_MAX_REQUESTS then
			modbus_queue_start = 0
		end if
		modbus_queue_count = modbus_queue_count - 1
		if modbus_queue_start = modbus_queue_end then
			modbus_queue_clear()
		end if
	end if
end function

function modbus_queue_get_count() as byte
	modbus_queue_get_count=modbus_queue_count
end function

function modbus_crc16(data as byte(255), byte_cnt as byte) as word
	if byte_cnt = 0 then
		modbus_crc16 = 0
		exit function
	end if
	dim crc_hi as byte = &HFF
	dim crc_lo as byte = &HFF
	dim i as byte
	dim idx as word
	dim data_index as byte = 0
	for i=0 to byte_cnt-1
		idx = crc_hi xor data(data_index)
		data_index = data_index + 1
		crc_hi = crc_lo xor modbus_crc_table_hi(idx)
		crc_lo = modbus_crc_table_hi(idx)
	next i
	
	modbus_crc16 = (crc_hi shl 8) or crc_lo
	
end function

function modbus_read_word(byref bytes as byte(255), start as byte) as word
	modbus_read_word = (bytes(start) shl 8) or bytes(start + 1)
end function

sub modbus_print_packet(byref s as string, is_send as boolean)
	#if MODBUS_DEBUG_PRINT
		dim size as byte=len(s)
		dim i as byte
		dim packet as string=""
		for i=0 to size-1
			dim part as string(2)=mid(hex(asc(mid(s,i+1,1))),3,2)
			if len(part)=1 then
				part="0" + part
			end if
			packet = packet + part + " "
		next i
		if is_send then
			modbus_debug_print("send: " + packet)
		else
			modbus_debug_print("recv: " + packet)
		end if
	#endif
end sub

sub modbus_debug_print(byref message as string)
#if MODBUS_DEBUG_PRINT
	sys.debugprint("modbus> " + message + "\r\n")
#endif
end sub