


	


const UI_BG_BLUE=41736
const UI_BG_GREEN=17704
const UI_BG_RED=31
const UI_BG_YELLOW=1631
const UI_TXT_GRAY=46486

const UI_SETTING_VAL_X=MENU_X
const UI_SETTING_VAL_Y=MENU_H+MENU_Y-7
const UI_SETTING_VAL_W=MENU_W
const UI_SETTING_VAL_H=23

const UI_KEY_F1=0
const UI_KEY_F2=1
const UI_KEY_F3=2
const UI_KEY_F4=3

const UI_EXIT_MENU = "Device will exit the programming mode now.`Continue?"
const UI_INVALID_INPUT = "INTERNAL ERROR (invalid input type)"
const UI_EMPTY_FOLDER = "This folder is empty"
const UI_SYS_ERROR_REBOOT = "INTERNAL ERROR. Device will now reboot."
const UI_COMMAND_ERROR_INIT = "Invalid data detected. You may have to reinitialize and/or restore from backup at least some of this device's data. Press OK to continue."
const UI_COMMAND_SETTING_FAILURE="FATAL SYSTEM FAILURE:`Setting error.`The system is not function properly. Device initialization may help."
const UI_COMMAND_REBOOT="Reboot the device?"
const UI_COMMAND_LOGOUT="Are you sure you want to logout?"
const UI_COMMAND_REBOOT_NOTICE="The device will reboot now."
const UI_SYS_SETTING_VALUE_INVALID="Setting value is invalid."
const UI_SYS_CALCULATE_WPA_KEY="The device is calculating the Wi-Fi security key. This is done in WPA-PSK and WPA2-PSK modes after the change of the access point name or password."

const UI_ICON_FILE = "icon.bmp"

enum en_mb_keys
	MBK_COMMAND_CONFIRM,
	MBK_COMMAND_CANCEL,
	MBK_YES,
	MBK_NO,
	MBK_OK,
	MBK_F1,
	MBK_F2,
	MBK_F4
end enum

enum en_ib_mode
	INPUT_BOX_ALPH_LOWER,
	INPUT_BOX_ALPH_UPPER,
	INPUT_BOX_NUMERIC
end enum

enum en_device_rdwr
	DEVICE_GET,
	DEVICE_SET
end enum

	




declare sub device_menu_pre(
	x_coord as word,	'x coordination
	y_coord as word,	'y coordination
	width as word,		'width of the menu in pixel
	height as word,		'height of the menu in pixel
	byref menu_states as string(MENU_MAX_LVL),	'allows user to start up the menu inside of selected sub-folders instead of root.  example: if menu_state = "23" then the menu will started at 2nd folder of menu lvl 1, 3rd folder of menu lvl 2. if menu_state = "" then menu started at root.
	byref menu_descriptor_file as string(20),		'the descriptor file
	access_level as byte, 		'access level of the user, only the menu item that is small or equal to access_level will show.
	timeout as byte				'if no respond from the keypad within the time defined by "timeout", exit the menu and return to the previous screen. If timeout = 0, no time out applies
	)
declare sub device_input_box_pre(
	byref mask_str as string(IB_MAX_LEN),	'uneditable part of the input string
	byref edit_str as string(IB_MAX_LEN),	'input string
	char_range as input_box_char_ranges,	'the input range. INPUT_BOX_CHAR_RANGE_09 only allows numeric input, INPUT_BOX_CHAR_RANGE_AZ allows alphabetic, INPUT_BOX_CHAR_RANGE_09AZ allows both numeric and alphabetic input.
	secret_mode as no_yes,			'if secret_mode = yes, all editable part of the input string will be display on the LCD as "*", this are mostly used for password.
	insert_mode as no_yes,			'if insert_mode = yes, the new character is insert before the cursor, if insert_mode = no, the character replaces the character at the cursor position.
	byref initial_pos as byte,			'initial cursor position
	timeout as byte,				'if no keypad activity for the amount of time defined by timeout, input box is automatically closed and return to previous screen.
	input_length as byte			'the maximum number of characters
)
declare sub device_list_box_pre(
	x_coord as word,		'x coordination
	y_coord as word,		'y coordination
	list_width as word,		'list box width
	list_height as word,	'list box height
	byref listbox_data as string,		'values and display strings of all list box items
	byref listbox_state as string(10),	'the value of selected list box item 
	timeout as byte						'if no respond from the keypad within the time defined by "timeout", exit the list box and return to the previous screen. If timeout = 0, no time out applies
	)
declare sub device_msg_box_pre(
	byref msg as string(160), 			'message to be displayed in the Message Box
	x as word, 							'x coordination
	y as word, 							'y coordination
	w as word, 							'width of the msgbox
	h as word, 							'height of the msgbox
	align as pl_lcd_text_alignment, 	'alignment of the text in the msgbox
	byref keycode_str as string(20),	'this string contains the characters which ASCII is correspond to the keycode of keys on the keypad that msgbox responds to 
	bolder as no_yes, 					'if the msgbox is wrap with a visible bolder line
	timeout as byte						'if no respond from the keypad within the time defined by "timeout", exit the msgbox and return to the previous screen. If timeout = 0, no time out applies
	)
declare sub device_menu_post(
	x_coord as word,	'x coordination
	y_coord as word,	'y coordination
	width as word,		'width of the menu in pixel
	height as word,		'height of the menu in pixel
	byref menu_states as string(MENU_MAX_LVL),	'allows user to start up the menu inside of selected sub-folders instead of root.  example: if menu_state = "23" then the menu will started at 2nd folder of menu lvl 1, 3rd folder of menu lvl 2. if menu_state = "" then menu started at root.
	byref menu_descriptor_file as string(20),		'the descriptor file
	access_level as byte, 		'access level of the user, only the menu item that is small or equal to access_level will show.
	timeout as byte				'if no respond from the keypad within the time defined by "timeout", exit the menu and return to the previous screen. If timeout = 0, no time out applies
	)
declare sub device_input_box_post(
	byref mask_str as string(IB_MAX_LEN),	'uneditable part of the input string
	byref edit_str as string(IB_MAX_LEN),	'input string
	char_range as input_box_char_ranges,	'the input range. INPUT_BOX_CHAR_RANGE_09 only allows numeric input, INPUT_BOX_CHAR_RANGE_AZ allows alphabetic, INPUT_BOX_CHAR_RANGE_09AZ allows both numeric and alphabetic input.
	secret_mode as no_yes,			'if secret_mode = yes, all editable part of the input string will be display on the LCD as "*", this are mostly used for password.
	insert_mode as no_yes,			'if insert_mode = yes, the new character is insert before the cursor, if insert_mode = no, the character replaces the character at the cursor position.
	byref initial_pos as byte,			'initial cursor position
	timeout as byte,				'if no keypad activity for the amount of time defined by timeout, input box is automatically closed and return to previous screen.
	input_length as byte			'the maximum number of characters
)
declare sub device_list_box_post(
	x_coord as word,		'x coordination
	y_coord as word,		'y coordination
	list_width as word,		'list box width
	list_height as word,	'list box height
	byref listbox_data as string,		'values and display strings of all list box items
	byref listbox_state as string(10),	'the value of selected list box item
	byref disable_print as no_yes,
	timeout as byte						'if no respond from the keypad within the time defined by "timeout", exit the list box and return to the previous screen. If timeout = 0, no time out applies
	)
declare sub device_msg_box_post(
	byref msg as string(60), 			'message to be displayed in the Message Box
	x as word, 							'x coordination
	y as word, 							'y coordination
	w as word, 							'width of the msgbox
	h as word, 							'height of the msgbox
	align as pl_lcd_text_alignment, 	'alignment of the text in the msgbox
	byref keycode_str as string(20),	'this string contains the characters which ASCII is correspond to the keycode of keys on the keypad that msgbox responds to 
	bolder as no_yes, 					'if the msgbox is wrap with a visible bolder line
	timeout as byte						'if no respond from the keypad within the time defined by "timeout", exit the msgbox and return to the previous screen. If timeout = 0, no time out applies
	)


declare function device_settings_sg(setting_name as string(5),index as byte, byref setting_val as string, byref stg_num as byte, rw as en_device_rdwr) as en_stg_status_codes
declare function device_mb_get_key(mk as en_mb_keys) as string
declare sub device_mb_interrupt()
declare sub device_ib_interrupt()
declare sub device_lb_interrupt()
declare sub device_tb_interrupt()
declare sub device_menu_interrupt()
declare sub device_move_cursor(menu_item as menu_display_item,desc_file as string(30))

declare sub device_ib_timer_event(byref current_state as input_box_key_actions,byref key_asc as byte,byref insert_mode as no_yes)
declare	sub lcd_clear(x as word, y as word, width as word, height as word)
declare sub lcd_print_msg(byref msg as string,x as word, y as word, w as word, h as word,al as pl_lcd_text_alignment, bolder as no_yes)
declare sub reset_keypad()

declare sub device_menu_key_proc(key_event as pl_kp_event_codes, key_code as byte, byref current_state as menu_key_actions)
declare sub device_number_key_action(led_key as word,upper_asc as byte,lower_asc as byte, number_asc as byte, byref current_state as input_box_key_actions, byref key_asc as byte, byref insert_mode as no_yes)
declare sub device_ib_key_proc(key_event as pl_kp_event_codes, key_code as byte, byref current_state as input_box_key_actions, byref key_asc as byte, byref insert_mode as no_yes)
declare sub device_lb_key_proc(key_event as pl_kp_event_codes, key_code as byte, byref current_state as list_box_key_action)
declare sub device_mb_key_proc(key_event as pl_kp_event_codes, key_code as byte)
declare sub set_stg_modified()
declare sub entering_menu()
